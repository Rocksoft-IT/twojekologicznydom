---
import '~/assets/styles/tailwind.css';

import { I18N } from 'astrowind:config';

import CommonMeta from '~/components/common/CommonMeta.astro';
import Favicons from '~/components/Favicons.astro';
import CustomStyles from '~/components/CustomStyles.astro';
import ApplyColorMode from '~/components/common/ApplyColorMode.astro';
import Metadata from '~/components/common/Metadata.astro';
import SiteVerification from '~/components/common/SiteVerification.astro';
import Analytics from '~/components/common/Analytics.astro';
import BasicScripts from '~/components/common/BasicScripts.astro';

// Comment the line below to disable View Transitions
import { ViewTransitions } from 'astro:transitions';

import type { MetaData as MetaDataType } from '~/types';

export interface Props {
  metadata?: MetaDataType;
}

const { metadata = {} } = Astro.props;
const { language, textDirection } = I18N;
---

<!doctype html>
<html lang={language} dir={textDirection} class="2xl:text-[16px]">
  <head>
    <CommonMeta />
    <Favicons />
    <CustomStyles />
    <ApplyColorMode />
    <Metadata {...metadata} />
    <SiteVerification />
    <Analytics />

    <link href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4/dist/css/splide.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    

    <!-- Comment the line below to disable View Transitions -->
    <ViewTransitions fallback="swap" />
  </head>

  <body class="antialiased text-default bg-white tracking-tight dark:bg-rs-dark-blue">
    <slot />

    <BasicScripts />

    


<script defer>
    document.addEventListener("DOMContentLoaded", (event) => {
      setIntervalSlider();
    });

    const setIntervalSlider = () => {
      const intervalId = setInterval(() => {
            if (checkIfItemsExists()) {
              clearInterval(intervalId);
            } else {
              new Splide( '.splide' ).mount();
            }
        }, 2000);
    }

    const checkIfItemsExists = () => {
      const splideContainer = document.querySelectorAll(".splide .splide__pagination li");
      return splideContainer.length > 0;
    }
 
</script>
<script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>

  </body>
</html>
